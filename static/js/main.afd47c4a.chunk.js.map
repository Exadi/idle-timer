{"version":3,"sources":["assets/notif.png","Components/FormControls/TextInput.js","Components/FormControls/CheckboxInput.js","Components/Timer/Timer.js","Components/SwordFight.js","App.js","serviceWorker.js","index.js","assets/bell_01.ogg"],"names":["module","exports","TextInput","label","this","props","className","htmlFor","id","type","value","onChange","help","React","PureComponent","CheckboxInput","checked","Timer","state","seconds","isRunning","playSound","sendNotification","tick","bind","start","restart","handlePlaySoundChange","handleSendNotificationChange","audio","Audio","sound","event","target","setState","clearInterval","intervalHandle","play","notification","setInterval","prevProps","console","log","visible","hours","Math","floor","minutes","onClick","Component","Master","level","unspentPoints","SwordFight","masters","rivalMasterLevel","rivalMasterTargetLevel","rivalMasterGreaterAmbition","inspiringLeaderLevel","greaterInspiringLeader","timerVisible","timerSeconds","ignore","title","handleMasterLevelChange","handleMasterPointsChange","handleRivalMasterLevelChange","handleRivalMasterTargetLevelChange","handleRivalMasterGreaterAmbitionChange","handleInspiringLeaderLevelChange","handleGreaterInspiringLeaderChange","calculate","index","split","newLevel","parseInt","master","list","newPoints","cap","capped","min","rivalLevel","rivalTargetLevel","greaterAmbition","effectiveLevels","map","item","max","alert","totalUnspentPoints","capUnspent","reduce","a","b","totalMinutes","currentLevel","totalDifference","expPerMin","expForLevel","round","options","tag","Date","now","body","icon","notifIcon","lang","dir","key","notSupported","handleNotSupported","onPermissionGranted","handlePermissionGranted","onPermissionDenied","handlePermissionDenied","timeout","swRegistration","bell_01","rel","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.afd47c4a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/notif.2c552084.png\";","import React from 'react';\r\nclass TextInput extends React.PureComponent{\r\n    render(){\r\n      let label = <p></p>;\r\n      if(this.props.label){\r\n        label = <label className=\"label\" htmlFor={this.props.id} >{this.props.label}</label>;\r\n      }\r\n      return (<div className=\"field\">\r\n                {label}\r\n                <div className=\"control\">\r\n                  <input className=\"input\" id={this.props.id} type=\"text\" value={this.props.value} onChange={this.props.onChange} />\r\n                </div>\r\n                {this.props.help ? <p className=\"help\">{this.props.help}</p> : \"\"}\r\n              </div>);\r\n    }\r\n}\r\n\r\nexport default TextInput;","import React from 'react';\r\nclass CheckboxInput extends React.PureComponent{\r\n    render(){\r\n      let label = <p></p>;\r\n      if(this.props.label){\r\n        label = <label className=\"label\" htmlFor={this.props.id} >{this.props.label}</label>;\r\n      }\r\n      return (<div className=\"field\">\r\n                <label className=\"checkBox\" htmlFor={this.props.id} >\r\n                  <input id={this.props.id} type=\"checkbox\" checked={this.props.checked} onChange={this.props.onChange} />\r\n                  {this.props.label}\r\n                </label>\r\n              </div>);\r\n    }\r\n}\r\n\r\nexport default CheckboxInput;","import React, {Component} from 'react';\r\nimport CheckboxInput from '../FormControls/CheckboxInput';\r\nimport bell_01 from '../../assets/bell_01.ogg'\r\n\r\nclass Timer extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            seconds: this.props.seconds,\r\n            isRunning: false,\r\n            playSound:true,\r\n            sendNotification:false\r\n        }\r\n        this.tick = this.tick.bind(this);\r\n        this.start = this.start.bind(this);\r\n        this.restart = this.restart.bind(this);\r\n\r\n        this.handlePlaySoundChange = this.handlePlaySoundChange.bind(this);\r\n        this.handleSendNotificationChange = this.handleSendNotificationChange.bind(this);\r\n\r\n        this.audio = new Audio(this.props.sound)\r\n    }\r\n\r\n    handlePlaySoundChange(event){\r\n        let playSound = event.target.checked;\r\n        this.setState({\r\n            playSound\r\n        })\r\n    }\r\n\r\n    handleSendNotificationChange(event){\r\n        let sendNotification = event.target.checked;\r\n        this.setState({\r\n            sendNotification\r\n        })\r\n    }\r\n\r\n    tick(){\r\n        let seconds = this.state.seconds - 1;\r\n\r\n        if(seconds <= 0){\r\n            seconds = 0.0;\r\n            clearInterval(this.intervalHandle);\r\n            if(this.state.playSound) this.audio.play();\r\n            if(this.state.sendNotification) this.props.notification();\r\n        }\r\n        this.setState({\r\n            seconds\r\n        });\r\n    }\r\n    start(){\r\n        this.intervalHandle = setInterval(this.tick, 1000);\r\n        this.setState({\r\n            isRunning: true\r\n        })\r\n    }\r\n\r\n    restart(){\r\n        clearInterval(this.intervalHandle);\r\n        this.setState({\r\n            seconds: this.props.seconds,\r\n            isRunning: false\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        // Typical usage (don't forget to compare props):\r\n        console.log(\"Timer update\")\r\n        if (this.props.seconds !== prevProps.seconds) {\r\n            this.setState({\r\n                seconds: this.props.seconds,\r\n                isRunning: false\r\n            });\r\n            if(this.intervalHandle){\r\n                clearInterval(this.intervalHandle);\r\n            }\r\n        }\r\n    }\r\n\r\n    render(){\r\n        if(!this.props.visible) return null;\r\n        let hours = Math.floor(this.state.seconds / 3600);\r\n        let minutes = Math.floor(this.state.seconds / 60) - (hours * 60);\r\n        let seconds = this.state.seconds - (minutes * 60) - (hours * 3600)\r\n        return (<div className=\"box has-text-centered\" visible={this.props.visible ? \"true\" : \"false\"}>\r\n            <h2 className=\"subtitle is-3\">Timer</h2>\r\n            \r\n            <div className=\"is-size-3\">\r\n                {hours}:{minutes < 10 ? \"0\" + minutes : minutes}:{seconds < 10 ? \"0\" + seconds : seconds}\r\n            </div>\r\n            <input type=\"button\" className=\"button is-primary is-outlined\" onClick={this.state.isRunning ? this.restart : this.start} value={this.state.isRunning ? \"Reset\" : \"Start\"} ></input>\r\n            <div className=\"columns\">\r\n                <div className=\"column\">\r\n                    <CheckboxInput label=\"Play Sound\" checked={this.state.playSound} onChange={this.handlePlaySoundChange} />\r\n                </div>\r\n                <div className=\"column\">\r\n                    <CheckboxInput label=\"Send Notification\" checked={this.state.sendNotification} onChange={this.handleSendNotificationChange} />\r\n                </div>\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default Timer;","import React, {Component} from 'react';\r\nimport TextInput from \"./FormControls/TextInput\"\r\nimport CheckboxInput from './FormControls/CheckboxInput';\r\nimport Timer from './Timer/Timer';\r\nimport bell_01 from '../assets/bell_01.ogg'\r\nimport Notification from \"react-web-notification\"\r\nimport notifIcon from '../assets/notif.png';\r\n\r\n\r\nclass Master {\r\n    constructor(level, unspentPoints){\r\n        this.level = level;\r\n        this.unspentPoints = unspentPoints;\r\n    }\r\n}\r\n\r\nclass SwordFight extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            masters: [\r\n                new Master(0, 0),\r\n                new Master(0, 0),\r\n                new Master(0, 0)\r\n            ],\r\n            rivalMasterLevel:0,\r\n            rivalMasterTargetLevel:0,\r\n            rivalMasterGreaterAmbition:false,\r\n            inspiringLeaderLevel:0,\r\n            greaterInspiringLeader:false,\r\n            timerVisible:false,\r\n            timerSeconds:0,\r\n            /*notification*/\r\n            ignore:true,\r\n            title:''\r\n        }\r\n        this.handleMasterLevelChange = this.handleMasterLevelChange.bind(this);\r\n        this.handleMasterPointsChange = this.handleMasterPointsChange.bind(this);\r\n        \r\n        this.handleRivalMasterLevelChange = this.handleRivalMasterLevelChange.bind(this);\r\n        this.handleRivalMasterTargetLevelChange = this.handleRivalMasterTargetLevelChange.bind(this);\r\n        this.handleRivalMasterGreaterAmbitionChange = this.handleRivalMasterGreaterAmbitionChange.bind(this);\r\n\r\n        this.handleInspiringLeaderLevelChange = this.handleInspiringLeaderLevelChange.bind(this);\r\n        this.handleGreaterInspiringLeaderChange = this.handleGreaterInspiringLeaderChange.bind(this);\r\n\r\n        this.calculate = this.calculate.bind(this);\r\n        this.sendNotification = this.sendNotification.bind(this);\r\n    }\r\n\r\n    handleMasterLevelChange(event) {\r\n        let index = event.target.id.split(\"_\")[2];\r\n        let newLevel = parseInt(event.target.value) || 0;\r\n        let master = {...this.state.masters[index]};\r\n        let list = [ ...this.state.masters ];\r\n        master.level = newLevel;\r\n        list[index] = master;\r\n        this.setState({\r\n            masters: list\r\n        })\r\n    };\r\n\r\n    handleMasterPointsChange(event) {\r\n        let index = event.target.id.split(\"_\")[2];\r\n        let newPoints = parseInt(event.target.value) || 0;\r\n        let master = {...this.state.masters[index]};\r\n        let list = [ ...this.state.masters ];\r\n        master.unspentPoints = newPoints;\r\n        list[index] = master;\r\n        this.setState({\r\n            masters: list\r\n        })\r\n    }\r\n\r\n    handleRivalMasterLevelChange(event){\r\n        let rivalMasterLevel = parseInt(event.target.value) || 0;\r\n        this.setState({\r\n            rivalMasterLevel\r\n        })\r\n    }\r\n\r\n    handleRivalMasterTargetLevelChange(event){\r\n        let rivalMasterTargetLevel = parseInt(event.target.value) || 0;\r\n        this.setState({\r\n            rivalMasterTargetLevel\r\n        })\r\n    }\r\n\r\n    handleRivalMasterGreaterAmbitionChange(event){\r\n        let rivalMasterGreaterAmbition = event.target.checked;\r\n        this.setState({\r\n            rivalMasterGreaterAmbition\r\n        })\r\n    }\r\n\r\n    handleInspiringLeaderLevelChange(event){\r\n        let inspiringLeaderLevel = parseInt(event.target.value) || 0;\r\n        this.setState({\r\n            inspiringLeaderLevel\r\n        })\r\n    }\r\n    handleGreaterInspiringLeaderChange(event){\r\n        let greaterInspiringLeader = event.target.checked;\r\n        this.setState({\r\n            greaterInspiringLeader\r\n        })\r\n    }\r\n\r\n    capUnspent(unspentPoints){\r\n        let cap = this.state.greaterInspiringLeader ? this.state.inspiringLeaderLevel * 30 : this.state.inspiringLeaderLevel * 20;\r\n        let capped = Math.min(unspentPoints, cap);\r\n        if(capped < unspentPoints) console.log(\"Capped \" + unspentPoints + \" unspent points at \" + capped);\r\n        return Math.min(unspentPoints, cap);\r\n    }\r\n    calculate(){\r\n        let rivalLevel = this.state.rivalMasterLevel;\r\n        let rivalTargetLevel = this.state.rivalMasterTargetLevel;\r\n        let greaterAmbition = this.state.rivalMasterGreaterAmbition;\r\n\r\n        //adjust master levels to account for greater ambition and create an array of the values\r\n        let effectiveLevels = this.state.masters.map((item) => (greaterAmbition ? item.level + 100 : item.level))\r\n        \r\n        //if master levels are too low to reach the target, return an error message\r\n        if (rivalTargetLevel > Math.max(...effectiveLevels)){\r\n            alert(\"Rival will never reach target level!\");\r\n            return;\r\n        }\r\n        let totalUnspentPoints = this.state.masters.map((item) => (this.capUnspent(item.unspentPoints))).reduce((a, b) => (a+b));\r\n        console.log(\"Total unspent points: \" + totalUnspentPoints);\r\n\r\n        let totalMinutes = 0.0;\r\n        for(let currentLevel = rivalLevel; currentLevel < rivalTargetLevel; currentLevel++)\r\n        {\r\n            console.log(\"Rival leveling from \" + currentLevel + \" to \" + (currentLevel + 1) + \":\");\r\n            //create a new array of differences between rival level and master effective level, then add them together\r\n            let totalDifference = effectiveLevels.map((item) => (Math.max(item - currentLevel))).reduce((a, b) => (a + b));\r\n            console.log(\"Total level difference: \" + totalDifference);\r\n            console.log(\"Base exp/min: \" + totalDifference);\r\n            let inspiringLeaderMultiplier = (totalUnspentPoints + 100)/100;\r\n            let expPerMin = totalDifference * inspiringLeaderMultiplier;\r\n            console.log(\"Inspired exp/min: \" + expPerMin);\r\n            let expForLevel = (currentLevel + 1) * 10 - 1;\r\n            let minutes = expForLevel / expPerMin;\r\n            totalMinutes += minutes;\r\n            console.log(\"It will take \" + minutes + \" minutes to gain the \" + expForLevel + \" exp for this level.\");\r\n        }\r\n\r\n        console.log(\"The total time is \" + totalMinutes);\r\n        let timerVisible = true;\r\n        let timerSeconds = Math.round(totalMinutes * 60);\r\n        this.setState({\r\n            timerVisible,\r\n            timerSeconds\r\n        })\r\n    }\r\n\r\n    handlePermissionGranted(){\r\n        console.log('Permission Granted');\r\n        this.setState({\r\n          ignore: false\r\n        });\r\n      }\r\n      handlePermissionDenied(){\r\n        console.log('Permission Denied');\r\n        this.setState({\r\n          ignore: true\r\n        });\r\n      }\r\n      handleNotSupported(){\r\n        console.log('Web Notification not Supported');\r\n        this.setState({\r\n          ignore: true\r\n        });\r\n      }\r\n      sendNotification() {\r\n\r\n        if(this.state.ignore) {\r\n          return;\r\n        }\r\n    \r\n        const now = Date.now();\r\n    \r\n        const title = 'Idle Timer';\r\n        const body = 'Rival Leveling Complete!';\r\n        const tag = now;\r\n        const icon = notifIcon;\r\n    \r\n        // Available options\r\n        // See https://developer.mozilla.org/en-US/docs/Web/API/Notification/Notification\r\n        const options = {\r\n          tag: tag,\r\n          body: body,\r\n          icon: icon,\r\n          lang: 'en',\r\n          dir: 'ltr'\r\n        }\r\n        this.setState({\r\n          title: title,\r\n          options: options\r\n        });\r\n      }\r\n\r\n    render(){\r\n        return (\r\n        <div id=\"sword-fight-calculator\">\r\n            <h1 className=\"title is-1 has-text-centered\">Rival Leveling Time</h1>\r\n            <div className=\"tile is-ancestor\">\r\n                {this.state.masters.map((item, index) => (\r\n                    <div key={index} className=\"tile is-parent\">\r\n                        <div className=\"tile is-child box\">\r\n                            <h2 className=\"title is-3 has-text-centered\">Master {index+1}</h2>\r\n                            <TextInput id={\"master_level_\" + index} label=\"Level: \" value={item.level} onChange={this.handleMasterLevelChange} />\r\n                            <TextInput id={\"master_points_\" + index} label=\"Unspent Points: \" value={item.unspentPoints} onChange={this.handleMasterPointsChange} help=\"Ignore if not using Inspiring Leader\" />\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"tile is-ancestor\">\r\n                <div className=\"tile is-parent\">\r\n                    <div className=\"tile is-child box\">\r\n                        <h2 className=\"title is-3 has-text-centered\">Rival Master</h2>\r\n                        <TextInput id=\"rival_master_level\" label=\"Level: \" value={this.state.rivalMasterLevel} onChange={this.handleRivalMasterLevelChange} />\r\n                        <TextInput id=\"rival_master_target_level\" label=\"Target Level: \" value={this.state.rivalMasterTargetLevel} onChange={this.handleRivalMasterTargetLevelChange} />\r\n                        <CheckboxInput id=\"rival_master_greater_ambition\" type=\"checkbox\" label=\"Co-Founder with Greater Ambition\" checked={this.state.rivalMasterGreaterAmbition} onChange={this.handleRivalMasterGreaterAmbitionChange} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"tile is-parent\">\r\n                    <div className=\"tile is-child box\">\r\n                        <h2 className=\"title is-3 has-text-centered\">Inspiring Leader</h2>\r\n                        <h6 className=\"subtitle is-6 has-text-centered\">(Xander's 4th Skill)</h6>\r\n                        <TextInput id=\"inspiring_leader_level\" label=\"Level: \" value={this.state.inspiringLeaderLevel} onChange={this.handleInspiringLeaderLevelChange} />\r\n                        <CheckboxInput id=\"inspiring_leader_greater\" label=\"Greater Inspiring Leader unlocked\" checked={this.state.greaterInspiringLeader} onChange={this.handleGreaterInspiringLeaderChange} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"has-text-centered\">\r\n                <input type=\"button\" className=\"button is-primary\" onClick={this.calculate} value=\"Calculate\" ></input>\r\n                <Notification\r\n                    ignore={this.state.ignore && this.state.title !== ''}\r\n                    notSupported={this.handleNotSupported.bind(this)}\r\n                    onPermissionGranted={this.handlePermissionGranted.bind(this)}\r\n                    onPermissionDenied={this.handlePermissionDenied.bind(this)}\r\n                    timeout={5000}\r\n                    title={this.state.title}\r\n                    options={this.state.options}\r\n                    swRegistration={this.props.swRegistration}\r\n                />\r\n                <br/>\r\n                <Timer visible={this.state.timerVisible} seconds={this.state.timerSeconds} sound={bell_01} notification={this.sendNotification} />\r\n                <br/>\r\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.kongregate.com/games/tovrick/sword-fight\">Play Sword Fight on Kongregate</a>\r\n            </div>\r\n            \r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SwordFight","import React from 'react';\n//import logo from './logo.svg';\nimport SwordFight from './Components/SwordFight'\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-headers\">\n        {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\n      </header>\n\n      <section className=\"section\">\n        <div className=\"container is-fluid\">\n          <SwordFight/>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bell_01.b81c7b5a.ogg\";"],"sourceRoot":""}