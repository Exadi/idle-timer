{"version":3,"sources":["Components/MyInput.js","Components/Timer.js","Components/SwordFight.js","App.js","serviceWorker.js","index.js","assets/bell_01.ogg"],"names":["InputWithLabel","label","this","props","htmlFor","id","type","value","onChange","React","PureComponent","Timer","state","seconds","isRunning","tick","bind","start","audio","Audio","sound","setState","clearInterval","intervalHandle","play","setInterval","hours","Math","floor","minutes","className","Button","variant","onClick","disabled","Component","Master","level","unspentPoints","SwordFight","masters","rivalMasterLevel","rivalMasterTargetLevel","rivalMasterGreaterAmbition","inspiringLeaderLevel","greaterInspiringLeader","timer","handleMasterLevelChange","handleMasterPointsChange","handleRivalMasterLevelChange","handleRivalMasterTargetLevelChange","handleRivalMasterGreaterAmbitionChange","handleInspiringLeaderLevelChange","handleGreaterInspiringLeaderChange","calculate","event","index","target","split","console","log","newLevel","parseInt","master","list","newPoints","checked","cap","capped","min","result","rivalLevel","rivalTargetLevel","greaterAmbition","effectiveLevels","map","item","max","totalUnspentPoints","capUnspent","reduce","a","b","totalMinutes","currentLevel","totalDifference","expPerMin","expForLevel","round","bell_01","key","MyInput","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.7649064a.chunk.js","sourcesContent":["import React from 'react';\r\nclass InputWithLabel extends React.PureComponent{\r\n    render(){\r\n      let label = <p></p>;\r\n      if(this.props.label){\r\n        label = <label htmlFor={this.props.id} >{this.props.label}</label>;\r\n      }\r\n      return (<span>\r\n              {label}\r\n              <input id={this.props.id} type={this.props.type} value={this.props.value} onChange={this.props.onChange} />\r\n              </span>);\r\n    }\r\n}\r\n\r\nexport default InputWithLabel;","import React, {Component} from 'react';\r\nimport Button from 'react-bootstrap/Button'\r\nimport bell_01 from '../assets/bell_01.ogg'\r\n\r\nclass Timer extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            seconds: this.props.seconds,\r\n            isRunning: false\r\n        }\r\n        this.tick = this.tick.bind(this);\r\n        this.start = this.start.bind(this);\r\n\r\n        this.audio = new Audio(this.props.sound)\r\n    }\r\n\r\n    tick(){\r\n        let seconds = this.state.seconds - 1;\r\n        this.setState({\r\n            seconds\r\n        });\r\n\r\n        if(seconds <= 0){\r\n            seconds = 0.0;\r\n            clearInterval(this.intervalHandle);\r\n            this.audio.play();\r\n        }\r\n    }\r\n    start(){\r\n        this.intervalHandle = setInterval(this.tick, 1000);\r\n        this.setState({\r\n            isRunning: true\r\n        })\r\n    }\r\n\r\n    render(){\r\n        let hours = Math.floor(this.state.seconds / 3600);\r\n        let minutes = Math.floor(this.state.seconds / 60) - (hours * 60);\r\n        let seconds = this.state.seconds - (minutes * 60) - (hours * 3600)\r\n        return (<div className=\"timer\">\r\n            <Button variant=\"secondary\" onClick={this.start} disabled={this.state.isRunning}>Set Timer</Button>{hours}:{minutes < 10 ? \"0\" + minutes : minutes}:{seconds < 10 ? \"0\" + seconds : seconds}\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default Timer;","import React, {Component} from 'react';\r\nimport MyInput from './MyInput';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Timer from './Timer';\r\nimport bell_01 from '../assets/bell_01.ogg'\r\n\r\nclass Master {\r\n    constructor(level, unspentPoints){\r\n        this.level = level;\r\n        this.unspentPoints = unspentPoints;\r\n    }\r\n}\r\n\r\nclass SwordFight extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            masters: [\r\n                new Master(0, 0),\r\n                new Master(0, 0),\r\n                new Master(0, 0)\r\n            ],\r\n            rivalMasterLevel:0,\r\n            rivalMasterTargetLevel:0,\r\n            rivalMasterGreaterAmbition:false,\r\n            inspiringLeaderLevel:0,\r\n            greaterInspiringLeader:false,\r\n            timer:\"Results should appear here\"\r\n        }\r\n        this.handleMasterLevelChange = this.handleMasterLevelChange.bind(this);\r\n        this.handleMasterPointsChange = this.handleMasterPointsChange.bind(this);\r\n        \r\n        this.handleRivalMasterLevelChange = this.handleRivalMasterLevelChange.bind(this);\r\n        this.handleRivalMasterTargetLevelChange = this.handleRivalMasterTargetLevelChange.bind(this);\r\n        this.handleRivalMasterGreaterAmbitionChange = this.handleRivalMasterGreaterAmbitionChange.bind(this);\r\n\r\n        this.handleInspiringLeaderLevelChange = this.handleInspiringLeaderLevelChange.bind(this);\r\n        this.handleGreaterInspiringLeaderChange = this.handleGreaterInspiringLeaderChange.bind(this);\r\n\r\n        this.calculate = this.calculate.bind(this);\r\n    }\r\n\r\n    handleMasterLevelChange(event) {\r\n        let index = event.target.id.split(\"_\")[2];\r\n        console.log(index, event)\r\n        let newLevel = parseInt(event.target.value);\r\n        let master = {...this.state.masters[index]};\r\n        let list = [ ...this.state.masters ];\r\n        master.level = newLevel;\r\n        list[index] = master;\r\n        this.setState({\r\n            masters: list\r\n        })\r\n    };\r\n\r\n    handleMasterPointsChange(event) {\r\n        let index = event.target.id.split(\"_\")[2];\r\n        console.log(index, event)\r\n        let newPoints = parseInt(event.target.value);\r\n        let master = {...this.state.masters[index]};\r\n        let list = [ ...this.state.masters ];\r\n        master.unspentPoints = newPoints;\r\n        list[index] = master;\r\n        this.setState({\r\n            masters: list\r\n        })\r\n    }\r\n\r\n    handleRivalMasterLevelChange(event){\r\n        let rivalMasterLevel = parseInt(event.target.value);\r\n        this.setState({\r\n            rivalMasterLevel\r\n        })\r\n    }\r\n\r\n    handleRivalMasterTargetLevelChange(event){\r\n        let rivalMasterTargetLevel = parseInt(event.target.value);\r\n        this.setState({\r\n            rivalMasterTargetLevel\r\n        })\r\n    }\r\n\r\n    handleRivalMasterGreaterAmbitionChange(event){\r\n        let rivalMasterGreaterAmbition = event.target.checked;\r\n        this.setState({\r\n            rivalMasterGreaterAmbition\r\n        })\r\n    }\r\n\r\n    handleInspiringLeaderLevelChange(event){\r\n        let inspiringLeaderLevel = parseInt(event.target.value);\r\n        this.setState({\r\n            inspiringLeaderLevel\r\n        })\r\n    }\r\n    handleGreaterInspiringLeaderChange(event){\r\n        let greaterInspiringLeader =event.target.checked;\r\n        this.setState({\r\n            greaterInspiringLeader\r\n        })\r\n    }\r\n\r\n    capUnspent(unspentPoints){\r\n        let cap = this.state.greaterInspiringLeader ? this.state.inspiringLeaderLevel * 30 : this.state.inspiringLeaderLevel * 20;\r\n        let capped = Math.min(unspentPoints, cap);\r\n        if(capped < unspentPoints) console.log(\"Capped \" + unspentPoints + \" unspent points at \" + capped);\r\n        return Math.min(unspentPoints, cap);\r\n    }\r\n    calculate(){\r\n        let result = \"\";\r\n        let rivalLevel = this.state.rivalMasterLevel;\r\n        let rivalTargetLevel = this.state.rivalMasterTargetLevel;\r\n        let greaterAmbition = this.state.rivalMasterGreaterAmbition;\r\n\r\n        //adjust master levels to account for greater ambition and create an array of the values\r\n        let effectiveLevels = this.state.masters.map((item) => (greaterAmbition ? item.level + 100 : item.level))\r\n        \r\n        //if master levels are too low to reach the target, return an error message\r\n        if (rivalTargetLevel > Math.max(...effectiveLevels)){\r\n            result = \"Rival will never reach target level!\";\r\n            this.setState({\r\n                \"timer\": result\r\n            });\r\n            return;\r\n        }\r\n        let totalUnspentPoints = this.state.masters.map((item) => (this.capUnspent(item.unspentPoints))).reduce((a, b) => (a+b));\r\n        console.log(\"Total unspent points: \" + totalUnspentPoints);\r\n\r\n        let totalMinutes = 0.0;\r\n        for(let currentLevel = rivalLevel; currentLevel < rivalTargetLevel; currentLevel++)\r\n        {\r\n            console.log(\"Rival leveling from \" + currentLevel + \" to \" + (currentLevel + 1) + \":\");\r\n            //create a new array of differences between rival level and master effective level, then add them together\r\n            let totalDifference = effectiveLevels.map((item) => (Math.max(item - currentLevel))).reduce((a, b) => (a + b));\r\n            console.log(\"Total level difference: \" + totalDifference);\r\n            console.log(\"Base exp/min: \" + totalDifference);\r\n            let inspiringLeaderMultiplier = (totalUnspentPoints + 100)/100;\r\n            let expPerMin = totalDifference * inspiringLeaderMultiplier;\r\n            console.log(\"Inspired exp/min: \" + expPerMin);\r\n            let expForLevel = (currentLevel + 1) * 10 - 1;\r\n            let minutes = expForLevel / expPerMin;\r\n            totalMinutes += minutes;\r\n            console.log(\"It will take \" + minutes + \" minutes to gain the \" + expForLevel + \" exp for this level.\");\r\n        }\r\n\r\n        console.log(\"The total time is \" + totalMinutes);\r\n        result = <Timer seconds={Math.round(totalMinutes * 60)} sound={bell_01} />\r\n        this.setState({\r\n            \"timer\": result\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n        <div id=\"sword-fight-calculator\">\r\n            <h1>Rival Leveling Time</h1>\r\n\r\n            {this.state.masters.map((item, index) => (\r\n                <div key={index}>\r\n                <h2>Master {index+1}</h2>\r\n                <MyInput id={\"master_level_\" + index} type=\"text\" label=\"Level: \" value={item.level} onChange={this.handleMasterLevelChange} />\r\n                <MyInput id={\"master_points_\" + index} type=\"text\" label=\"Unspent Points: \" value={item.unspentPoints} onChange={this.handleMasterPointsChange} />\r\n                </div>\r\n            ))}\r\n\r\n            <h2>Rival Master</h2>\r\n            <MyInput id=\"rival_master_level\" type=\"text\" label=\"Level: \" value={this.state.rivalMasterLevel} onChange={this.handleRivalMasterLevelChange} />\r\n            <MyInput id=\"rival_master_target_level\" type=\"text\" label=\"Target Level: \" value={this.state.rivalMasterTargetLevel} onChange={this.handleRivalMasterTargetLevelChange} />\r\n            <MyInput id=\"rival_master_greater_ambition\" type=\"checkbox\" label=\"Co-Founder with Greater Ambition: \" checked={this.state.rivalMasterGreaterAmbition} onChange={this.handleRivalMasterGreaterAmbitionChange} />\r\n            <br/>\r\n            <h2>Inspiring Leader</h2>\r\n            <MyInput id=\"rival_master_level\" type=\"text\" label=\"Level: \" value={this.state.inspiringLeaderLevel} onChange={this.handleInspiringLeaderLevelChange} />\r\n            <MyInput id=\"rival_master_level\" type=\"checkbox\" label=\"Greater: \" checked={this.state.greaterInspiringLeader} onChange={this.handleGreaterInspiringLeaderChange} />\r\n\r\n            <br/>\r\n            <Button onClick={this.calculate}>Calculate</Button>\r\n            <br/>\r\n            \r\n            {this.state.timer}\r\n\r\n            <a href=\"https://www.kongregate.com/games/tovrick/sword-fight\">Play Sword Fight on Kongregate</a>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SwordFight","import React from 'react';\n//import logo from './logo.svg';\nimport SwordFight from './Components/SwordFight'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-headers\">\n        {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\n      </header>\n          <SwordFight/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bell_01.b81c7b5a.ogg\";"],"sourceRoot":""}